{"version":3,"file":"qiniu4js.js","sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 7c699118140bdce15969","webpack:///./src/util/Log.ts","webpack:///./src/upload/Uploader.ts","webpack:///./src/upload/UploaderBuilder.ts","webpack:///./src/upload/task/BaseTask.ts","webpack:///./src/Main.ts","webpack:///./src/upload/hook/SimpleUploadListener.ts","webpack:///./src/upload/interceptor/SimpleUploadInterceptor.ts","webpack:///./src/upload/pattren/ChunkUploadPattern.ts","webpack:///./src/upload/pattren/DirectUploadPattern.ts","webpack:///./src/upload/task/ChunkTask.ts","webpack:///./src/upload/task/DirectTask.ts","webpack:///./src/upload/uuid/UUID.ts","webpack:///./src/util/Polyfill.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Qiniu\"] = factory();\n\telse\n\t\troot[\"Qiniu\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 7c699118140bdce15969","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Log = function () {\n    function Log() {\n        _classCallCheck(this, Log);\n    }\n\n    _createClass(Log, null, [{\n        key: \"d\",\n        value: function d(object) {\n            if (!Log._enable) {\n                return;\n            }\n            console.debug(object);\n        }\n    }, {\n        key: \"l\",\n        value: function l(object) {\n            if (!Log._enable) {\n                return;\n            }\n            console.log(object);\n        }\n    }, {\n        key: \"e\",\n        value: function e(object) {\n            if (!Log._enable) {\n                return;\n            }\n            console.error(object);\n        }\n    }, {\n        key: \"w\",\n        value: function w(object) {\n            if (!Log._enable) {\n                return;\n            }\n            console.warn(object);\n        }\n    }, {\n        key: \"i\",\n        value: function i(object) {\n            if (!Log._enable) {\n                return;\n            }\n            console.info(object);\n        }\n    }, {\n        key: \"enable\",\n        get: function get() {\n            return this._enable;\n        },\n        set: function set(value) {\n            this._enable = value;\n        }\n    }]);\n\n    return Log;\n}();\n\nLog._enable = false;\nexports.default = Log;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/util/Log.ts\n// module id = 0\n// module chunks = 0","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _DirectTask = require(\"./task/DirectTask\");\n\nvar _DirectTask2 = _interopRequireDefault(_DirectTask);\n\nvar _ChunkTask = require(\"./task/ChunkTask\");\n\nvar _UUID = require(\"./uuid/UUID\");\n\nvar _UUID2 = _interopRequireDefault(_UUID);\n\nvar _UploaderBuilder = require(\"./UploaderBuilder\");\n\nvar _UploaderBuilder2 = _interopRequireDefault(_UploaderBuilder);\n\nvar _Log = require(\"../util/Log\");\n\nvar _Log2 = _interopRequireDefault(_Log);\n\nvar _SimpleUploadListener = require(\"./hook/SimpleUploadListener\");\n\nvar _SimpleUploadListener2 = _interopRequireDefault(_SimpleUploadListener);\n\nvar _DirectUploadPattern = require(\"./pattren/DirectUploadPattern\");\n\nvar _DirectUploadPattern2 = _interopRequireDefault(_DirectUploadPattern);\n\nvar _ChunkUploadPattern = require(\"./pattren/ChunkUploadPattern\");\n\nvar _ChunkUploadPattern2 = _interopRequireDefault(_ChunkUploadPattern);\n\nrequire(\"../util/Polyfill\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Uploader = function () {\n    function Uploader(builder) {\n        var _this2 = this;\n\n        _classCallCheck(this, Uploader);\n\n        this.FILE_INPUT_EL_ID = 'qiniu4js-input';\n        this._taskQueue = []; //任务队列\n        this._tasking = false; //任务执行中\n        this._scale = []; //缩放大小,限定高度等比缩放[h:200,w:0],限定宽度等比缩放[h:0,w:100],限定长宽[h:200,w:100]\n        this._saveKey = false;\n        /**\n         * 处理文件\n         */\n        this.handleFiles = function () {\n            //如果没有选中文件就返回\n            if (_this2.fileInput.files.length == 0) {\n                return;\n            }\n            //生成task\n            _this2.generateTask();\n            //是否中断任务\n            var isInterrupt = false;\n            var interceptedTasks = [];\n            //任务拦截器过滤\n            var _iteratorNormalCompletion = true;\n            var _didIteratorError = false;\n            var _iteratorError = undefined;\n\n            try {\n                for (var _iterator = _this2.taskQueue[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                    var task = _step.value;\n                    var _iteratorNormalCompletion3 = true;\n                    var _didIteratorError3 = false;\n                    var _iteratorError3 = undefined;\n\n                    try {\n                        for (var _iterator3 = _this2.interceptors[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n                            var interceptor = _step3.value;\n\n                            //拦截生效\n                            if (interceptor.onIntercept(task, _this2.taskQueue)) {\n                                interceptedTasks.push(task);\n                                _Log2.default.d(\"任务拦截器拦截了任务:\");\n                                _Log2.default.d(task);\n                            }\n                            //打断生效\n                            if (interceptor.onInterrupt(task, _this2.taskQueue)) {\n                                //将打断标志位设为true\n                                isInterrupt = true;\n                                break;\n                            }\n                        }\n                    } catch (err) {\n                        _didIteratorError3 = true;\n                        _iteratorError3 = err;\n                    } finally {\n                        try {\n                            if (!_iteratorNormalCompletion3 && _iterator3.return) {\n                                _iterator3.return();\n                            }\n                        } finally {\n                            if (_didIteratorError3) {\n                                throw _iteratorError3;\n                            }\n                        }\n                    }\n                }\n            } catch (err) {\n                _didIteratorError = true;\n                _iteratorError = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion && _iterator.return) {\n                        _iterator.return();\n                    }\n                } finally {\n                    if (_didIteratorError) {\n                        throw _iteratorError;\n                    }\n                }\n            }\n\n            if (isInterrupt) {\n                _Log2.default.w(\"任务拦截器中断了任务队列\");\n                return;\n            }\n            //从任务队列中去除任务\n            var _iteratorNormalCompletion2 = true;\n            var _didIteratorError2 = false;\n            var _iteratorError2 = undefined;\n\n            try {\n                for (var _iterator2 = interceptedTasks[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                    var _task = _step2.value;\n\n                    var index = _this2.taskQueue.indexOf(_task);\n                    if (index != -1) {\n                        _this2.taskQueue.splice(index, 1);\n                    }\n                }\n                //回调函数函数\n            } catch (err) {\n                _didIteratorError2 = true;\n                _iteratorError2 = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion2 && _iterator2.return) {\n                        _iterator2.return();\n                    }\n                } finally {\n                    if (_didIteratorError2) {\n                        throw _iteratorError2;\n                    }\n                }\n            }\n\n            _this2.listener.onReady(_this2.taskQueue);\n            //处理图片\n            _this2.handleImages().then(function () {\n                //自动上传\n                if (_this2.auto) {\n                    _Log2.default.d(\"开始自动上传\");\n                    _this2.start();\n                }\n            });\n        };\n        this.resolveUUID = function (s) {\n            var re = /\\$\\(uuid\\)/;\n            if (re.test(s)) {\n                return s.replace(re, _UUID2.default.uuid());\n            }\n            return s;\n        };\n        this.resolveImageInfo = function (blob, s) {\n            var widthRe = /\\$\\(imageInfo\\.width\\)/;\n            var heightRe = /\\$\\(imageInfo\\.height\\)/;\n            if (!widthRe.test(s) && !heightRe.test(s)) {\n                return Promise.resolve(s);\n            }\n            return new Promise(function (resolve) {\n                var img = new Image();\n                img.src = URL.createObjectURL(blob);\n                img.onload = function () {\n                    s = s.replace(widthRe, img.width.toString());\n                    s = s.replace(heightRe, img.height.toString());\n                    resolve(s);\n                };\n            });\n        };\n        this.onSaveKeyResolved = function (saveKey) {\n            _this2._tokenShare = _this2._tokenShare && _this2._saveKey == saveKey;\n            return saveKey;\n        };\n        this._retry = builder.getRetry;\n        this._size = builder.getSize;\n        this._chunk = builder.getChunk;\n        this._auto = builder.getAuto;\n        this._multiple = builder.getMultiple;\n        this._accept = builder.getAccept;\n        this._button = builder.getButton;\n        this._buttonEventName = builder.getButtonEventName;\n        this._compress = builder.getCompress;\n        this._scale = builder.getScale;\n        this._saveKey = builder.getSaveKey;\n        this._tokenFunc = builder.getTokenFunc;\n        this._tokenShare = builder.getTokenShare;\n        this._listener = Object.assign(new _SimpleUploadListener2.default(), builder.getListener);\n        this._interceptors = builder.getInterceptors;\n        this._domain = builder.getDomain;\n        this._fileInputId = this.FILE_INPUT_EL_ID + \"_\" + new Date().getTime();\n        _Log2.default.enable = builder.getIsDebug;\n        this.validateOptions();\n        this.init();\n    }\n    /**\n     * 初始化操作\n     */\n\n\n    _createClass(Uploader, [{\n        key: \"init\",\n        value: function init() {\n            this.initFileInputEl();\n        }\n        /**\n         * 初始化file input element\n         */\n\n    }, {\n        key: \"initFileInputEl\",\n        value: function initFileInputEl() {\n            //查询已经存在的file input\n            var exist = document.getElementById(this._fileInputId);\n            //创建input元素\n            this._fileInput = exist ? exist : document.createElement('input');\n            this.fileInput.type = 'file'; //type file\n            this.fileInput.id = this._fileInputId; //id 方便后面查找\n            this.fileInput.style.display = 'none'; //隐藏file input\n            //多文件\n            if (this.multiple) {\n                //多文件\n                this.fileInput.multiple = true;\n            }\n            //文件类型\n            if (this.accept && this.accept.length != 0) {\n                var acceptValue = '';\n                var _iteratorNormalCompletion4 = true;\n                var _didIteratorError4 = false;\n                var _iteratorError4 = undefined;\n\n                try {\n                    for (var _iterator4 = this.accept[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n                        var value = _step4.value;\n\n                        acceptValue += value;\n                        acceptValue += ',';\n                    }\n                } catch (err) {\n                    _didIteratorError4 = true;\n                    _iteratorError4 = err;\n                } finally {\n                    try {\n                        if (!_iteratorNormalCompletion4 && _iterator4.return) {\n                            _iterator4.return();\n                        }\n                    } finally {\n                        if (_didIteratorError4) {\n                            throw _iteratorError4;\n                        }\n                    }\n                }\n\n                if (acceptValue.endsWith(',')) {\n                    acceptValue = acceptValue.substring(0, acceptValue.length - 1);\n                }\n                this.fileInput.accept = acceptValue;\n                _Log2.default.d(\"accept\\u7C7B\\u578B \" + acceptValue);\n            }\n            //将input元素添加到body子节点的末尾\n            document.body.appendChild(this.fileInput);\n            //选择文件监听器\n            this.fileInput.addEventListener('change', this.handleFiles, false);\n            if (this._button != undefined) {\n                var button = document.getElementById(this._button);\n                button.addEventListener(this._buttonEventName, this.chooseFile.bind(this));\n            }\n        }\n        /**\n         * 上传完成或者失败后,对本次上传任务进行清扫\n         */\n\n    }, {\n        key: \"resetUploader\",\n        value: function resetUploader() {\n            _Log2.default.d(\"开始重置 uploader\");\n            this.taskQueue.length = 0;\n            _Log2.default.d(\"任务队列已清空\");\n            this._token = null;\n            _Log2.default.d(\"token已清空\");\n            _Log2.default.d(\"uploader 重置完毕\");\n        }\n        /**\n         * 是否是分块任务\n         * @param task\n         * @returns {boolean}\n         */\n\n    }, {\n        key: \"generateTask\",\n\n        /**\n         * 生成task\n         */\n        value: function generateTask() {\n            this.resetUploader();\n            var files = this.fileInput.files;\n            //遍历files 创建上传任务\n            for (var i = 0; i < this.fileInput.files.length; i++) {\n                var file = files[i];\n                var task = void 0;\n                //只有在开启分块上传，并且文件大小大于4mb的时候才进行分块上传\n                if (this.chunk && file.size > _UploaderBuilder2.default.BLOCK_SIZE) {\n                    task = new _ChunkTask.ChunkTask(file, _UploaderBuilder2.default.BLOCK_SIZE, this.size);\n                } else {\n                    task = new _DirectTask2.default(file);\n                }\n                if (this._saveKey == false) {\n                    task.key = this.listener.onTaskGetKey(task);\n                }\n                this.taskQueue.push(task);\n            }\n        }\n        /**\n         * 处理图片-缩放-质量压缩\n         */\n\n    }, {\n        key: \"handleImages\",\n        value: function handleImages() {\n            var _this3 = this;\n\n            var promises = [];\n            if (this.compress != 1 || this.scale[0] != 0 || this.scale[1] != 0) {\n                var _iteratorNormalCompletion5 = true;\n                var _didIteratorError5 = false;\n                var _iteratorError5 = undefined;\n\n                try {\n                    var _loop = function _loop() {\n                        var task = _step5.value;\n\n                        if (!task.file.type.match('image.*')) {\n                            return \"continue\";\n                        }\n                        _Log2.default.d(task.file.name + \" \\u5904\\u7406\\u524D\\u7684\\u56FE\\u7247\\u5927\\u5C0F:\" + task.file.size / 1024 + \" kb\");\n                        var canvas = document.createElement('canvas');\n                        var img = new Image();\n                        var ctx = canvas.getContext('2d');\n                        img.src = URL.createObjectURL(task.file);\n                        var _this = _this3;\n                        promises.push(new Promise(function (resolve) {\n                            return img.onload = function () {\n                                var imgW = img.width;\n                                var imgH = img.height;\n                                var scaleW = _this.scale[0];\n                                var scaleH = _this.scale[1];\n                                if (scaleW == 0 && scaleH > 0) {\n                                    canvas.width = imgW / imgH * scaleH;\n                                    canvas.height = scaleH;\n                                } else if (scaleH == 0 && scaleW > 0) {\n                                    canvas.width = scaleW;\n                                    canvas.height = imgH / imgW * scaleW;\n                                } else if (scaleW > 0 && scaleH > 0) {\n                                    canvas.width = scaleW;\n                                    canvas.height = scaleH;\n                                } else {\n                                    canvas.width = img.width;\n                                    canvas.height = img.height;\n                                }\n                                //这里的长宽是绘制到画布上的图片的长宽\n                                ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n                                console.log(canvas);\n                                console.log(canvas.toBlob);\n                                //0.95是最接近原图大小，如果质量为1的话会导致比原图大几倍。\n                                canvas.toBlob(function (blob) {\n                                    resolve(blob);\n                                    _Log2.default.d(task.file.name + \" \\u5904\\u7406\\u540E\\u7684\\u56FE\\u7247\\u5927\\u5C0F:\" + blob.size / 1024 + \" kb\");\n                                }, \"image/jpeg\", _this.compress * 0.95);\n                            };\n                        }).then(function (blob) {\n                            blob.name = task.file.name;\n                            task.file = blob;\n                            if (Uploader.isChunkTask(task)) {\n                                task.spliceFile2Block();\n                            }\n                        }));\n                    };\n\n                    for (var _iterator5 = this.taskQueue[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n                        var _ret = _loop();\n\n                        if (_ret === \"continue\") continue;\n                    }\n                } catch (err) {\n                    _didIteratorError5 = true;\n                    _iteratorError5 = err;\n                } finally {\n                    try {\n                        if (!_iteratorNormalCompletion5 && _iterator5.return) {\n                            _iterator5.return();\n                        }\n                    } finally {\n                        if (_didIteratorError5) {\n                            throw _iteratorError5;\n                        }\n                    }\n                }\n            }\n            return Promise.all(promises);\n        }\n        /**\n         * 检验选项合法性\n         */\n\n    }, {\n        key: \"validateOptions\",\n        value: function validateOptions() {\n            _Log2.default.d(\"开始检查构建参数合法性\");\n            if (!this._tokenFunc) {\n                throw new Error('你必须提供一个获取Token的回调函数');\n            }\n            if (!this.scale || !(this.scale instanceof Array) || this.scale.length != 2 || this.scale[0] < 0 || this.scale[1] < 0) {\n                throw new Error('scale必须是长度为2的number类型的数组,scale[0]为宽度，scale[1]为长度,必须大于等于0');\n            }\n            _Log2.default.d(\"构建参数检查完毕\");\n        }\n        /**\n         * 开始上传\n         */\n\n    }, {\n        key: \"start\",\n        value: function start() {\n            _Log2.default.d(\"\\u4E0A\\u4F20\\u4EFB\\u52A1\\u904D\\u5386\\u5F00\\u59CB\");\n            if (this.fileInput.files.length == 0) {\n                throw new Error('没有选中的文件，无法开始上传');\n            }\n            if (this.tasking) {\n                throw new Error('任务执行中，请不要重复上传');\n            }\n            this.listener.onStart(this.taskQueue);\n            //遍历任务队列\n            var _iteratorNormalCompletion6 = true;\n            var _didIteratorError6 = false;\n            var _iteratorError6 = undefined;\n\n            try {\n                for (var _iterator6 = this.taskQueue[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n                    var _task2 = _step6.value;\n\n                    _Log2.default.d(\"\\u4E0A\\u4F20\\u6587\\u4EF6\\u540D\\uFF1A\" + _task2.file.name);\n                    _Log2.default.d(\"\\u4E0A\\u4F20\\u6587\\u4EF6\\u5927\\u5C0F\\uFF1A\" + _task2.file.size + \"\\u5B57\\u8282\\uFF0C\" + _task2.file.size / 1024 + \" kb\\uFF0C\" + _task2.file.size / 1024 / 1024 + \" mb\");\n                    //根据任务的类型调用不同的上传模式进行上传\n                    if (Uploader.isDirectTask(_task2)) {\n                        _Log2.default.d('该上传任务为直传任务');\n                        //直传\n                        new _DirectUploadPattern2.default(this).upload(_task2);\n                    } else if (Uploader.isChunkTask(_task2)) {\n                        _Log2.default.d('该上传任务为分片任务');\n                        //分块上传\n                        new _ChunkUploadPattern2.default(this).upload(_task2);\n                    } else {\n                        throw new Error('非法的task类型');\n                    }\n                }\n            } catch (err) {\n                _didIteratorError6 = true;\n                _iteratorError6 = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion6 && _iterator6.return) {\n                        _iterator6.return();\n                    }\n                } finally {\n                    if (_didIteratorError6) {\n                        throw _iteratorError6;\n                    }\n                }\n            }\n        }\n        /**\n         * 所有任务是否完成\n         * @returns {boolean}\n         */\n\n    }, {\n        key: \"isTaskQueueFinish\",\n        value: function isTaskQueueFinish() {\n            var _iteratorNormalCompletion7 = true;\n            var _didIteratorError7 = false;\n            var _iteratorError7 = undefined;\n\n            try {\n                for (var _iterator7 = this.taskQueue[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {\n                    var _task3 = _step7.value;\n\n                    if (!_task3.isFinish) {\n                        return false;\n                    }\n                }\n            } catch (err) {\n                _didIteratorError7 = true;\n                _iteratorError7 = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion7 && _iterator7.return) {\n                        _iterator7.return();\n                    }\n                } finally {\n                    if (_didIteratorError7) {\n                        throw _iteratorError7;\n                    }\n                }\n            }\n\n            return true;\n        }\n        /**\n         * 选择文件\n         */\n\n    }, {\n        key: \"chooseFile\",\n        value: function chooseFile() {\n            this.fileInput.click();\n        }\n    }, {\n        key: \"getToken\",\n        value: function getToken(task) {\n            var _this4 = this;\n\n            if (this._tokenShare && this._token != undefined) {\n                return Promise.resolve(this._token);\n            }\n            _Log2.default.d(\"\\u5F00\\u59CB\\u83B7\\u53D6\\u4E0A\\u4F20token\");\n            return Promise.resolve(this._tokenFunc(this, task)).then(function (token) {\n                _Log2.default.d(\"\\u4E0A\\u4F20token\\u83B7\\u53D6\\u6210\\u529F: \" + token);\n                _this4._token = token;\n                return token;\n            });\n        }\n    }, {\n        key: \"requestTaskToken\",\n        value: function requestTaskToken(task, url) {\n            var _this5 = this;\n\n            return this.resolveSaveKey(task).then(function (saveKey) {\n                return _this5.requestToken(url, saveKey);\n            });\n        }\n    }, {\n        key: \"requestToken\",\n        value: function requestToken(url, saveKey) {\n            return new Promise(function (resolve, reject) {\n                if (typeof saveKey == \"string\") {\n                    url += (/\\?/.test(url) ? \"&\" : \"?\") + \"saveKey=\" + encodeURIComponent(saveKey);\n                }\n                url += (/\\?/.test(url) ? \"&\" : \"?\") + new Date().getTime();\n                var xhr = new XMLHttpRequest();\n                xhr.open('GET', url, true);\n                xhr.onreadystatechange = function () {\n                    if (xhr.readyState != XMLHttpRequest.DONE) {\n                        return;\n                    }\n                    if (xhr.status == 200) {\n                        resolve(xhr.response.uptoken);\n                        return;\n                    }\n                    reject(xhr.response);\n                };\n                xhr.onabort = function () {\n                    reject('aborted');\n                };\n                xhr.responseType = 'json';\n                xhr.send();\n            });\n        }\n    }, {\n        key: \"resolveSaveKey\",\n        value: function resolveSaveKey(task) {\n            var _this6 = this;\n\n            var saveKey = this._saveKey;\n            if (typeof saveKey != \"string\") {\n                return Promise.resolve(undefined);\n            }\n            return Promise.resolve(saveKey).then(this.resolveUUID).then(function (saveKey) {\n                return _this6.resolveImageInfo(task.file, saveKey);\n            }).then(this.onSaveKeyResolved);\n        }\n    }, {\n        key: \"retry\",\n        get: function get() {\n            return this._retry;\n        }\n    }, {\n        key: \"size\",\n        get: function get() {\n            return this._size;\n        }\n    }, {\n        key: \"auto\",\n        get: function get() {\n            return this._auto;\n        }\n    }, {\n        key: \"multiple\",\n        get: function get() {\n            return this._multiple;\n        }\n    }, {\n        key: \"accept\",\n        get: function get() {\n            return this._accept;\n        }\n    }, {\n        key: \"compress\",\n        get: function get() {\n            return this._compress;\n        }\n    }, {\n        key: \"scale\",\n        get: function get() {\n            return this._scale;\n        }\n    }, {\n        key: \"listener\",\n        get: function get() {\n            return this._listener;\n        }\n    }, {\n        key: \"fileInput\",\n        get: function get() {\n            return this._fileInput;\n        }\n    }, {\n        key: \"chunk\",\n        get: function get() {\n            return this._chunk;\n        }\n    }, {\n        key: \"taskQueue\",\n        get: function get() {\n            return this._taskQueue;\n        }\n    }, {\n        key: \"tasking\",\n        get: function get() {\n            return this._tasking;\n        },\n        set: function set(value) {\n            this._tasking = value;\n        }\n    }, {\n        key: \"interceptors\",\n        get: function get() {\n            return this._interceptors;\n        }\n    }, {\n        key: \"domain\",\n        get: function get() {\n            return this._domain;\n        }\n    }], [{\n        key: \"isChunkTask\",\n        value: function isChunkTask(task) {\n            return task.constructor.name === _ChunkTask.ChunkTask.name && task instanceof _ChunkTask.ChunkTask;\n        }\n        /**\n         * 是否是直传任务\n         * @param task\n         * @returns {boolean}\n         */\n\n    }, {\n        key: \"isDirectTask\",\n        value: function isDirectTask(task) {\n            return task.constructor.name === _DirectTask2.default.name && task instanceof _DirectTask2.default;\n        }\n    }]);\n\n    return Uploader;\n}();\n\nexports.default = Uploader;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/upload/Uploader.ts\n// module id = 1\n// module chunks = 0","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _Uploader = require(\"./Uploader\");\n\nvar _Uploader2 = _interopRequireDefault(_Uploader);\n\nvar _SimpleUploadInterceptor = require(\"./interceptor/SimpleUploadInterceptor\");\n\nvar _SimpleUploadInterceptor2 = _interopRequireDefault(_SimpleUploadInterceptor);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * UploaderBuilder\n *\n */\nvar UploaderBuilder = function () {\n    function UploaderBuilder() {\n        _classCallCheck(this, UploaderBuilder);\n\n        this._retry = 0; //最大重试次数\n        this._domain = UploaderBuilder.UPLOAD_DOMAIN; //上传域名\n        this._scheme = null; //上传域名的 scheme\n        this._size = 1024 * 1024; //分片大小,单位字节,上限4m,不能为0\n        this._chunk = true; //分块上传\n        this._auto = true; //自动上传,每次选择文件后\n        this._multiple = true; //是否支持多文件\n        this._accept = []; //接受的文件类型\n        this._compress = 1; //图片压缩质量\n        this._scale = [0, 0]; //缩放大小,限定高度等比[h:200,w:0],限定宽度等比[h:0,w:100],限定长宽[h:200,w:100]\n        this._saveKey = false;\n        this._tokenShare = true; //分享token,如果为false,每一次HTTP请求都需要新获取Token\n        this._interceptors = []; //任务拦截器\n        this._isDebug = false; //\n    }\n    /**\n     * 设置上传的域名,默认是 {http: 'http://upload.qiniu.com', https: 'https://up.qbox.me'}\n     * @param domain\n     * @returns {UploaderBuilder}\n     */\n\n\n    _createClass(UploaderBuilder, [{\n        key: \"domain\",\n        value: function domain(_domain) {\n            this._domain = _domain;\n            return this;\n        }\n        /**\n         * 设置上传域名的协议类型，默认从 window.location.protocol 读取\n         * @param scheme\n         * @returns {UploaderBuilder}\n         */\n\n    }, {\n        key: \"scheme\",\n        value: function scheme(_scheme) {\n            this._scheme = _scheme;\n            return this;\n        }\n        /**\n         * 添加一个拦截器\n         * @param interceptor\n         * @returns {UploaderBuilder}\n         */\n\n    }, {\n        key: \"interceptor\",\n        value: function interceptor(_interceptor) {\n            this._interceptors.push(Object.assign(new _SimpleUploadInterceptor2.default(), _interceptor));\n            return this;\n        }\n        /**\n         * 上传失败后的重传尝试次数\n         * @param retry 默认0次，不尝试次重传\n         * @returns {UploaderBuilder}\n         */\n\n    }, {\n        key: \"retry\",\n        value: function retry(_retry) {\n            this._retry = _retry;\n            return this;\n        }\n        /**\n         * 设置分片大小\n         * @param size 分块大小,单位字节,默认4*1024*1024字节(4mb)\n         * @returns {UploaderBuilder}\n         */\n\n    }, {\n        key: \"size\",\n        value: function size(_size) {\n            this._size = Math.min(Math.max(_size, 1), UploaderBuilder.MAX_CHUNK_SIZE);\n            return this;\n        }\n        /**\n         * 选择文件后,是否自动上传\n         * @param auto 默认true\n         * @returns {UploaderBuilder}\n         */\n\n    }, {\n        key: \"auto\",\n        value: function auto(_auto) {\n            this._auto = _auto;\n            return this;\n        }\n        /**\n         * 是否支持多文件选择\n         * @param multiple 默认true\n         * @returns {UploaderBuilder}\n         */\n\n    }, {\n        key: \"multiple\",\n        value: function multiple(_multiple) {\n            this._multiple = _multiple;\n            return this;\n        }\n        /**\n         * 接受上传的文件类型\n         * @param accept 数组形式例如:['.png','video/*']\n         *\n         * 详细配置见http://www.w3schools.com/tags/att_input_accept.asp\n         *\n         * @returns {UploaderBuilder}\n         */\n\n    }, {\n        key: \"accept\",\n        value: function accept(_accept) {\n            this._accept = _accept;\n            return this;\n        }\n        /**\n         * 设置上传按钮\n         * @param button 上传按钮ID\n         * @param eventName 上传按钮的监听事件名称，默认为 \"click\" 。\n         * @returns {UploaderBuilder}\n         */\n\n    }, {\n        key: \"button\",\n        value: function button(_button) {\n            var eventName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"click\";\n\n            this._button = _button;\n            this._buttonEventName = eventName;\n            return this;\n        }\n        /**\n         * 图片质量压缩,只在上传的文件是图片的时候有效\n         * @param compress 0-1,默认1,不压缩\n         * @returns {UploaderBuilder}\n         */\n\n    }, {\n        key: \"compress\",\n        value: function compress(_compress) {\n            this._compress = Math.max(Math.min(_compress, 1), 0);\n            return this;\n        }\n        /**\n         * 图片缩放\n         * @returns {UploaderBuilder}\n         * @param scale\n         */\n\n    }, {\n        key: \"scale\",\n        value: function scale(_scale) {\n            this._scale = _scale;\n            return this;\n        }\n        /**\n         * 设置 saveKey\n         * @param saveKey\n         * @returns {UploaderBuilder}\n         */\n\n    }, {\n        key: \"saveKey\",\n        value: function saveKey(_saveKey) {\n            this._saveKey = _saveKey;\n            return this;\n        }\n        /**\n         * 获取Token的地址\n         * @param tokenUrl\n         * @returns {UploaderBuilder}\n         */\n\n    }, {\n        key: \"tokenUrl\",\n        value: function tokenUrl(_tokenUrl) {\n            this._tokenFunc = function (uploader, task) {\n                return uploader.requestTaskToken(task, _tokenUrl);\n            };\n            return this;\n        }\n        /**\n         * 获取Token的函数\n         * @param tokenFunc\n         * @returns {UploaderBuilder}\n         */\n\n    }, {\n        key: \"tokenFunc\",\n        value: function tokenFunc(_tokenFunc) {\n            this._tokenFunc = function (uploader, task) {\n                return new Promise(function (resolve) {\n                    _tokenFunc(resolve, task);\n                });\n            };\n            return this;\n        }\n        /**\n         * 上传生命周期钩子\n         * @param listener\n         * @returns {UploaderBuilder}\n         */\n\n    }, {\n        key: \"listener\",\n        value: function listener(_listener) {\n            this._listener = _listener;\n            return this;\n        }\n        /**\n         * 是否分享token,如果为false每上传一个文件都需要请求一次Token。\n         * @param tokenShare\n         * @returns {UploaderBuilder}\n         */\n\n    }, {\n        key: \"tokenShare\",\n        value: function tokenShare(_tokenShare) {\n            this._tokenShare = _tokenShare;\n            return this;\n        }\n        /**\n         * 是否分块上传\n         * @param chunk 默认false\n         * @returns {UploaderBuilder}\n         */\n\n    }, {\n        key: \"chunk\",\n        value: function chunk(_chunk) {\n            this._chunk = _chunk;\n            return this;\n        }\n        /**\n         * 是否开启debug模式\n         * @param debug 默认false\n         * @returns {UploaderBuilder}\n         */\n\n    }, {\n        key: \"debug\",\n        value: function debug(_debug) {\n            this._isDebug = _debug;\n            return this;\n        }\n    }, {\n        key: \"build\",\n        value: function build() {\n            return new _Uploader2.default(this);\n        }\n    }, {\n        key: \"getRetry\",\n        get: function get() {\n            return this._retry;\n        }\n    }, {\n        key: \"getSize\",\n        get: function get() {\n            return this._size;\n        }\n    }, {\n        key: \"getAuto\",\n        get: function get() {\n            return this._auto;\n        }\n    }, {\n        key: \"getMultiple\",\n        get: function get() {\n            return this._multiple;\n        }\n    }, {\n        key: \"getAccept\",\n        get: function get() {\n            return this._accept;\n        }\n    }, {\n        key: \"getButton\",\n        get: function get() {\n            return this._button;\n        }\n    }, {\n        key: \"getButtonEventName\",\n        get: function get() {\n            return this._buttonEventName;\n        }\n    }, {\n        key: \"getCompress\",\n        get: function get() {\n            return this._compress;\n        }\n    }, {\n        key: \"getScale\",\n        get: function get() {\n            return this._scale;\n        }\n    }, {\n        key: \"getListener\",\n        get: function get() {\n            return this._listener;\n        }\n    }, {\n        key: \"getSaveKey\",\n        get: function get() {\n            return this._saveKey;\n        }\n    }, {\n        key: \"getTokenFunc\",\n        get: function get() {\n            return this._tokenFunc;\n        }\n    }, {\n        key: \"getTokenShare\",\n        get: function get() {\n            return this._tokenShare;\n        }\n    }, {\n        key: \"getChunk\",\n        get: function get() {\n            return this._chunk;\n        }\n    }, {\n        key: \"getIsDebug\",\n        get: function get() {\n            return this._isDebug;\n        }\n    }, {\n        key: \"getInterceptors\",\n        get: function get() {\n            return this._interceptors;\n        }\n    }, {\n        key: \"getDomain\",\n        get: function get() {\n            var domain = this._domain;\n            if (!domain) {\n                domain = UploaderBuilder.UPLOAD_DOMAIN;\n            }\n            if (typeof domain != \"string\") {\n                var scheme = this._scheme;\n                if (typeof scheme != \"string\") {\n                    var protocol = window.location.protocol;\n                    scheme = protocol.substring(0, protocol.length - 1);\n                }\n                domain = domain[scheme];\n            }\n            return domain.endsWith('/') ? domain.substring(0, domain.length - 1) : domain;\n        }\n    }]);\n\n    return UploaderBuilder;\n}();\n\nUploaderBuilder.MAX_CHUNK_SIZE = 4 * 1024 * 1024; //分片最大值\nUploaderBuilder.BLOCK_SIZE = UploaderBuilder.MAX_CHUNK_SIZE; //分块大小，只有大于这个数才需要分块\nUploaderBuilder.UPLOAD_DOMAIN = { http: 'http://upload.qiniu.com', https: 'https://up.qbox.me' };\nexports.default = UploaderBuilder;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/upload/UploaderBuilder.ts\n// module id = 2\n// module chunks = 0","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * 上传任务\n */\nvar BaseTask = function () {\n    function BaseTask(file) {\n        _classCallCheck(this, BaseTask);\n\n        this._retry = 0; //已重试次数\n        this._progress = 0; //任务进度,最大100\n        this._isSuccess = false; //是否上传成功\n        this._isFinish = false; //是否结束\n        this._file = file;\n        this._createDate = new Date();\n    }\n\n    _createClass(BaseTask, [{\n        key: \"file\",\n        get: function get() {\n            return this._file;\n        },\n        set: function set(file) {\n            this._file = file;\n        }\n    }, {\n        key: \"retry\",\n        get: function get() {\n            return this._retry;\n        },\n        set: function set(value) {\n            this._retry = value;\n        }\n    }, {\n        key: \"createDate\",\n        get: function get() {\n            return this._createDate;\n        },\n        set: function set(value) {\n            this._createDate = value;\n        }\n    }, {\n        key: \"startDate\",\n        get: function get() {\n            return this._startDate;\n        },\n        set: function set(value) {\n            this._startDate = value;\n        }\n    }, {\n        key: \"endDate\",\n        get: function get() {\n            return this._endDate;\n        },\n        set: function set(value) {\n            this._endDate = value;\n        }\n    }, {\n        key: \"isSuccess\",\n        get: function get() {\n            return this._isSuccess;\n        },\n        set: function set(value) {\n            this._isSuccess = value;\n        }\n    }, {\n        key: \"progress\",\n        get: function get() {\n            return this._progress;\n        },\n        set: function set(value) {\n            this._progress = Math.min(Math.max(0, value), 100);\n        }\n    }, {\n        key: \"result\",\n        get: function get() {\n            return this._result;\n        },\n        set: function set(value) {\n            this._result = value;\n        }\n    }, {\n        key: \"error\",\n        get: function get() {\n            return this._error;\n        },\n        set: function set(value) {\n            this._error = value;\n        }\n    }, {\n        key: \"key\",\n        get: function get() {\n            return this._key;\n        },\n        set: function set(value) {\n            this._key = value;\n        }\n    }, {\n        key: \"isFinish\",\n        get: function get() {\n            return this._isFinish;\n        },\n        set: function set(value) {\n            this._isFinish = value;\n        }\n    }]);\n\n    return BaseTask;\n}();\n\nexports.default = BaseTask;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/upload/task/BaseTask.ts\n// module id = 3\n// module chunks = 0","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.UploaderBuilder = exports.Uploader = undefined;\n\nvar _Uploader = require(\"./upload/Uploader\");\n\nvar _Uploader2 = _interopRequireDefault(_Uploader);\n\nvar _UploaderBuilder = require(\"./upload/UploaderBuilder\");\n\nvar _UploaderBuilder2 = _interopRequireDefault(_UploaderBuilder);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.Uploader = _Uploader2.default;\nexports.UploaderBuilder = _UploaderBuilder2.default;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/Main.ts\n// module id = 4\n// module chunks = 0","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar SimpleUploadListener = function () {\n    function SimpleUploadListener() {\n        _classCallCheck(this, SimpleUploadListener);\n    }\n\n    _createClass(SimpleUploadListener, [{\n        key: \"onReady\",\n        value: function onReady(taskQueue) {}\n    }, {\n        key: \"onStart\",\n        value: function onStart(taskQueue) {}\n    }, {\n        key: \"onTaskProgress\",\n        value: function onTaskProgress(task) {}\n    }, {\n        key: \"onTaskGetKey\",\n        value: function onTaskGetKey(task) {\n            return null;\n        }\n    }, {\n        key: \"onTaskFail\",\n        value: function onTaskFail(task) {}\n    }, {\n        key: \"onTaskSuccess\",\n        value: function onTaskSuccess(task) {}\n    }, {\n        key: \"onTaskRetry\",\n        value: function onTaskRetry(task) {}\n    }, {\n        key: \"onFinish\",\n        value: function onFinish(taskQueue) {}\n    }]);\n\n    return SimpleUploadListener;\n}();\n\nexports.default = SimpleUploadListener;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/upload/hook/SimpleUploadListener.ts\n// module id = 5\n// module chunks = 0","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar SimpleUploadInterceptor = function () {\n    function SimpleUploadInterceptor() {\n        _classCallCheck(this, SimpleUploadInterceptor);\n    }\n\n    _createClass(SimpleUploadInterceptor, [{\n        key: \"onIntercept\",\n        value: function onIntercept(task) {\n            return false;\n        }\n    }, {\n        key: \"onInterrupt\",\n        value: function onInterrupt(task) {\n            return false;\n        }\n    }]);\n\n    return SimpleUploadInterceptor;\n}();\n\nexports.default = SimpleUploadInterceptor;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/upload/interceptor/SimpleUploadInterceptor.ts\n// module id = 6\n// module chunks = 0","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _Log = require(\"../../util/Log\");\n\nvar _Log2 = _interopRequireDefault(_Log);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * 分块上传\n */\nvar ChunkUploadPattern = function () {\n    function ChunkUploadPattern(uploader) {\n        _classCallCheck(this, ChunkUploadPattern);\n\n        this.uploader = uploader;\n    }\n\n    _createClass(ChunkUploadPattern, [{\n        key: \"init\",\n        value: function init(uploader) {\n            this.uploader = uploader;\n        }\n    }, {\n        key: \"upload\",\n        value: function upload(task) {\n            var _this = this;\n\n            this.task = task;\n            this.uploader.getToken(task).then(function (token) {\n                task.startDate = new Date();\n                _this.uploadBlock(token);\n            });\n        }\n    }, {\n        key: \"uploadBlock\",\n        value: function uploadBlock(token) {\n            var _this2 = this;\n\n            _Log2.default.d(\"\\u51C6\\u5907\\u5F00\\u59CB\\u4E0A\\u4F20\\u5757\");\n            var chain = Promise.resolve();\n            _Log2.default.d(\"\\u5171\" + this.task.blocks.length + \"\\u5757\\u7B49\\u5F85\\u4E0A\\u4F20\");\n            _Log2.default.d(\"\\u5171\" + this.task.totalChunkCount + \"\\u5206\\u7247\\u7B49\\u5F85\\u4E0A\\u4F20\");\n            this.task.blocks.forEach(function (block, blockIndex) {\n                block.chunks.forEach(function (chunk, chunkIndex) {\n                    chain = chain.then(function () {\n                        _Log2.default.d(\"\\u5F00\\u59CB\\u4E0A\\u4F20\\u7B2C\" + (blockIndex + 1) + \"\\u5757,\\u7B2C\" + (chunkIndex + 1) + \"\\u7247\");\n                        return _this2.uploadChunk(chunk, token);\n                    });\n                });\n            });\n            chain.then(function () {\n                return _this2.concatChunks(token);\n            }).then(function () {\n                //所有任务都结束了\n                if (_this2.uploader.isTaskQueueFinish()) {\n                    _Log2.default.d(\"\\u4E0A\\u4F20\\u4EFB\\u52A1\\u961F\\u5217\\u5DF2\\u7ED3\\u675F\");\n                    //更改任务执行中标志\n                    _this2.uploader.tasking = false;\n                    //监听器调用\n                    _this2.uploader.listener.onFinish(_this2.uploader.taskQueue);\n                }\n            }).catch(function (response) {\n                _Log2.default.w(_this2.task.file.name + \"\\u5206\\u5757\\u4E0A\\u4F20\\u5931\\u8D25\");\n                _this2.task.error = response;\n                _this2.task.isSuccess = false;\n                _this2.task.isFinish = true;\n                _this2.task.endDate = new Date();\n                _this2.uploader.listener.onTaskFail(_this2.task);\n            });\n        }\n    }, {\n        key: \"uploadChunk\",\n        value: function uploadChunk(chunk, token) {\n            var _this3 = this;\n\n            return new Promise(function (resolve, reject) {\n                var isFirstChunkInBlock = chunk.block.chunks.indexOf(chunk) == 0;\n                var chunkIndex = chunk.block.chunks.indexOf(chunk);\n                //前一个chunk,如果存在的话\n                var prevChunk = isFirstChunkInBlock ? null : chunk.block.chunks[chunkIndex - 1];\n                var url = isFirstChunkInBlock ? _this3.getUploadBlockUrl(chunk.block.data.size) : _this3.getUploadChunkUrl(chunk.start, prevChunk ? prevChunk.ctx : null, prevChunk ? prevChunk.host : null);\n                var xhr = new XMLHttpRequest();\n                xhr.open('POST', url += (/\\?/.test(url) ? \"&\" : \"?\") + new Date().getTime(), true);\n                xhr.setRequestHeader('Content-Type', 'application/octet-stream'); //设置contentType\n                xhr.setRequestHeader('Authorization', \"UpToken \" + token); //添加token验证头\n                //分片上传中\n                xhr.upload.onprogress = function (e) {\n                    if (e.lengthComputable) {\n                        var progress = Math.round((_this3.task.finishedBlocksSize + chunk.start + e.loaded) / _this3.task.file.size * 100);\n                        if (_this3.task.progress < progress) {\n                            _this3.task.progress = progress;\n                            _this3.uploader.listener.onTaskProgress(_this3.task);\n                        }\n                    }\n                };\n                //分片上传完成\n                xhr.upload.onload = function () {\n                    var progress = Math.round((_this3.task.finishedBlocksSize + chunk.start + chunk.data.size) / _this3.task.file.size * 100);\n                    if (_this3.task.progress < progress) {\n                        _this3.task.progress = progress;\n                        _this3.uploader.listener.onTaskProgress(_this3.task);\n                    }\n                };\n                //响应返回\n                xhr.onreadystatechange = function () {\n                    if (xhr.readyState == XMLHttpRequest.DONE) {\n                        if (xhr.status == 200 && xhr.responseText != '') {\n                            var result = JSON.parse(xhr.responseText);\n                            chunk.isFinish = true;\n                            chunk.processing = false;\n                            chunk.ctx = result.ctx;\n                            chunk.host = result.host;\n                            var _chunkIndex = chunk.block.chunks.indexOf(chunk);\n                            var hasNextChunkInThisBlock = _chunkIndex != chunk.block.chunks.length - 1;\n                            if (!hasNextChunkInThisBlock) {\n                                chunk.block.isFinish = true;\n                                chunk.block.processing = false;\n                            }\n                            resolve();\n                        } else {\n                            reject(xhr.response);\n                        }\n                    }\n                };\n                xhr.send(chunk.data);\n            });\n        }\n    }, {\n        key: \"concatChunks\",\n        value: function concatChunks(token) {\n            var _this4 = this;\n\n            return new Promise(function (resolve, reject) {\n                var encodedKey = _this4.task.key ? btoa(_this4.task.key) : null;\n                // 安全字符串 参考：https://developer.qiniu.com/kodo/api/mkfile\n                if (encodedKey) {\n                    encodedKey = encodedKey.replace(/\\+/g, '-');\n                    encodedKey = encodedKey.replace(/\\//g, '_');\n                }\n                var url = _this4.getMakeFileUrl(_this4.task.file.size, encodedKey);\n                //构建所有数据块最后一个数据片上传后得到的<ctx>的组合成的列表字符串\n                var ctxListString = '';\n                var _iteratorNormalCompletion = true;\n                var _didIteratorError = false;\n                var _iteratorError = undefined;\n\n                try {\n                    for (var _iterator = _this4.task.blocks[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                        var block = _step.value;\n\n                        var lastChunk = block.chunks[block.chunks.length - 1];\n                        ctxListString += lastChunk.ctx + ',';\n                    }\n                } catch (err) {\n                    _didIteratorError = true;\n                    _iteratorError = err;\n                } finally {\n                    try {\n                        if (!_iteratorNormalCompletion && _iterator.return) {\n                            _iterator.return();\n                        }\n                    } finally {\n                        if (_didIteratorError) {\n                            throw _iteratorError;\n                        }\n                    }\n                }\n\n                if (ctxListString.endsWith(',')) {\n                    ctxListString = ctxListString.substring(0, ctxListString.length - 1);\n                }\n                var xhr = new XMLHttpRequest();\n                xhr.open('POST', url += (/\\?/.test(url) ? \"&\" : \"?\") + new Date().getTime(), true);\n                xhr.setRequestHeader('Content-Type', 'text/plain'); //设置contentType\n                xhr.setRequestHeader('Authorization', \"UpToken \" + token); //添加token验证头\n                xhr.onreadystatechange = function () {\n                    if (xhr.readyState == XMLHttpRequest.DONE) {\n                        _this4.task.isFinish = true;\n                        if (xhr.status == 200 && xhr.responseText != '') {\n                            var result = JSON.parse(xhr.responseText);\n                            _this4.task.isSuccess = true;\n                            _this4.task.result = result;\n                            _this4.task.endDate = new Date();\n                            _this4.uploader.listener.onTaskSuccess(_this4.task);\n                            resolve();\n                        } else if (_this4.retryTask(_this4.task)) {\n                            _Log2.default.w(_this4.task.file.name + \"\\u5206\\u5757\\u4E0A\\u4F20\\u5931\\u8D25,\\u51C6\\u5907\\u5F00\\u59CB\\u91CD\\u4F20\");\n                            _this4.uploader.listener.onTaskRetry(_this4.task);\n                        } else {\n                            reject(xhr.response);\n                        }\n                    }\n                };\n                xhr.send(ctxListString);\n            });\n        }\n        /**\n         * 获取块上传的url\n         * @param blockSize\n         * @returns {string}\n         */\n\n    }, {\n        key: \"getUploadBlockUrl\",\n        value: function getUploadBlockUrl(blockSize) {\n            return this.uploader.domain + \"/mkblk/\" + blockSize;\n        }\n        /**\n         * 获取片上传的url\n         * @param start 片的在块中的起始位置\n         * @param ctx 前一次上传返回的块级上传控制信息。\n         * @param host 指定host\n         */\n\n    }, {\n        key: \"getUploadChunkUrl\",\n        value: function getUploadChunkUrl(start, ctx, host) {\n            return (host ? host : this.uploader.domain) + \"/bput/\" + ctx + \"/\" + start + \"/\";\n        }\n        /**\n         * 获取合并块为文件的url\n         * @param fileSize 文件大小\n         * @param encodedKey base64UrlEncode后的资源名称,若未指定，则使用saveKey；若未指定saveKey，则使用资源内容的SHA1值作为资源名。\n         * @returns {string}\n         */\n\n    }, {\n        key: \"getMakeFileUrl\",\n        value: function getMakeFileUrl(fileSize, encodedKey) {\n            if (encodedKey) {\n                return this.uploader.domain + \"/mkfile/\" + fileSize + \"/key/\" + encodedKey;\n            } else {\n                return this.uploader.domain + \"/mkfile/\" + fileSize;\n            }\n        }\n    }, {\n        key: \"retryTask\",\n        value: function retryTask(task) {\n            //达到重试次数\n            if (task.retry >= this.uploader.retry) {\n                _Log2.default.w(task.file.name + \"\\u8FBE\\u5230\\u91CD\\u4F20\\u6B21\\u6570\\u4E0A\\u9650\" + this.uploader.retry + \",\\u505C\\u6B62\\u91CD\\u4F20\");\n                return false;\n            }\n            task.retry++;\n            _Log2.default.w(task.file.name + \"\\u5F00\\u59CB\\u91CD\\u4F20,\\u5F53\\u524D\\u91CD\\u4F20\\u6B21\\u6570\" + task.retry);\n            // this.upload(task);\n            //todo\n            return true;\n        }\n    }]);\n\n    return ChunkUploadPattern;\n}();\n\nexports.default = ChunkUploadPattern;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/upload/pattren/ChunkUploadPattern.ts\n// module id = 7\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _Log = require('../../util/Log');\n\nvar _Log2 = _interopRequireDefault(_Log);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * 直接上传\n */\nvar DirectUploadPattern = function () {\n    function DirectUploadPattern(uploader) {\n        _classCallCheck(this, DirectUploadPattern);\n\n        this.uploader = uploader;\n    }\n    /**\n     * 实现接口的上传方法\n     * @param task\n     */\n\n\n    _createClass(DirectUploadPattern, [{\n        key: 'upload',\n        value: function upload(task) {\n            var _this = this;\n\n            this.task = task;\n            this.uploader.getToken(task).then(function (token) {\n                task.startDate = new Date();\n                _this.uploadFile(token);\n            });\n        }\n        /**\n         * 创建表单\n         * @param token\n         * @returns {FormData}\n         */\n\n    }, {\n        key: 'createFormData',\n        value: function createFormData(token) {\n            var task = this.task;\n            var formData = new FormData();\n            //key存在，添加到formData中，若不设置，七牛服务器会自动生成hash key\n            if (task.key !== null && task.key !== undefined) {\n                formData.append('key', task.key);\n            }\n            formData.append('token', token);\n            formData.append('file', task.file);\n            _Log2.default.d('\\u521B\\u5EFAformData\\u5BF9\\u8C61');\n            return formData;\n        }\n        /**\n         * 上传文件\n         * @param token\n         */\n\n    }, {\n        key: 'uploadFile',\n        value: function uploadFile(token) {\n            var _this2 = this;\n\n            var task = this.task;\n            var xhr = new XMLHttpRequest();\n            //上传中\n            xhr.upload.onprogress = function (e) {\n                if (e.lengthComputable) {\n                    var progress = Math.round(e.loaded * 100 / e.total);\n                    if (task.progress < progress) {\n                        task.progress = progress;\n                        _this2.uploader.listener.onTaskProgress(task);\n                    }\n                }\n            };\n            //上传完成\n            xhr.upload.onload = function () {\n                if (task.progress < 100) {\n                    task.progress = 100;\n                    _this2.uploader.listener.onTaskProgress(task);\n                }\n            };\n            var url = this.uploader.domain;\n            //避免浏览器缓存http请求\n            url += (/\\?/.test(this.uploader.domain) ? \"&\" : \"?\") + new Date().getTime();\n            xhr.open('POST', url, true);\n            xhr.onreadystatechange = function () {\n                if (xhr.readyState == XMLHttpRequest.DONE) {\n                    if (xhr.status == 200 && xhr.responseText != '') {\n                        task.result = JSON.parse(xhr.responseText);\n                        task.isSuccess = true;\n                        task.isFinish = true;\n                        task.endDate = new Date();\n                        _this2.uploader.listener.onTaskSuccess(task);\n                    } else if (_this2.retryTask(task)) {\n                        _Log2.default.w(task.file.name + '\\u4E0A\\u4F20\\u5931\\u8D25,\\u51C6\\u5907\\u5F00\\u59CB\\u91CD\\u4F20');\n                        _this2.uploader.listener.onTaskRetry(task);\n                    } else {\n                        _Log2.default.w(task.file.name + '\\u4E0A\\u4F20\\u5931\\u8D25');\n                        task.error = xhr.response;\n                        task.isSuccess = false;\n                        task.isFinish = true;\n                        task.endDate = new Date();\n                        _this2.uploader.listener.onTaskFail(task);\n                    }\n                    //所有任务都结束了\n                    if (_this2.uploader.isTaskQueueFinish()) {\n                        _Log2.default.d('上传队列结束');\n                        //更改任务执行中标志\n                        _this2.uploader.tasking = false;\n                        //onFinish callback\n                        _this2.uploader.listener.onFinish(_this2.uploader.taskQueue);\n                    }\n                }\n            };\n            var formData = this.createFormData(token);\n            xhr.send(formData);\n            _Log2.default.d('发送ajax post 请求');\n        }\n        /**\n         * 重传\n         * @param task\n         * @returns {boolean}\n         */\n\n    }, {\n        key: 'retryTask',\n        value: function retryTask(task) {\n            _Log2.default.d(\"开始尝试重传\");\n            //达到重试次数\n            if (task.retry >= this.uploader.retry) {\n                _Log2.default.w(task.file.name + '\\u8FBE\\u5230\\u91CD\\u4F20\\u6B21\\u6570\\u4E0A\\u9650' + this.uploader.retry + ',\\u505C\\u6B62\\u91CD\\u4F20');\n                return false;\n            }\n            task.retry++;\n            _Log2.default.w(task.file.name + '\\u5F00\\u59CB\\u91CD\\u4F20,\\u5F53\\u524D\\u91CD\\u4F20\\u6B21\\u6570' + task.retry);\n            this.upload(task);\n            return true;\n        }\n    }]);\n\n    return DirectUploadPattern;\n}();\n\nexports.default = DirectUploadPattern;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/upload/pattren/DirectUploadPattern.ts\n// module id = 8\n// module chunks = 0","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.Chunk = exports.Block = exports.ChunkTask = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _BaseTask2 = require(\"./BaseTask\");\n\nvar _BaseTask3 = _interopRequireDefault(_BaseTask2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\n * 分块任务\n */\nvar ChunkTask = function (_BaseTask) {\n    _inherits(ChunkTask, _BaseTask);\n\n    /**\n     * 构造函数\n     * @param file\n     * @param blockSize 块大小\n     * @param chunkSize 片大小\n     */\n    function ChunkTask(file, blockSize, chunkSize) {\n        _classCallCheck(this, ChunkTask);\n\n        //分块\n        var _this = _possibleConstructorReturn(this, (ChunkTask.__proto__ || Object.getPrototypeOf(ChunkTask)).call(this, file));\n\n        _this._blocks = [];\n        _this._blockSize = 0;\n        _this._chunkSize = 0;\n        _this._blockSize = blockSize;\n        _this._chunkSize = chunkSize;\n        _this.spliceFile2Block();\n        return _this;\n    }\n    /**\n     * 将文件分块\n     */\n\n\n    _createClass(ChunkTask, [{\n        key: \"spliceFile2Block\",\n        value: function spliceFile2Block() {\n            this._blocks = [];\n            var fileSize = this._file.size;\n            var file = this._file;\n            //总块数\n            var blockCount = Math.ceil(fileSize / this._blockSize);\n            for (var i = 0; i < blockCount; i++) {\n                var start = i * this._blockSize; //起始位置\n                var end = start + this._blockSize; //结束位置\n                //构造一个块实例\n                var block = new Block(start, end, file.slice(start, end), this._chunkSize, file);\n                //添加到数组中\n                this._blocks.push(block);\n            }\n        }\n        /**\n         * 获取所有的block\n         * @returns {Block[]}\n         */\n\n    }, {\n        key: \"blocks\",\n        get: function get() {\n            return this._blocks;\n        }\n        /**\n         * 获取正在处理的block\n         * @returns {Block}\n         */\n\n    }, {\n        key: \"processingBlock\",\n        get: function get() {\n            var _iteratorNormalCompletion = true;\n            var _didIteratorError = false;\n            var _iteratorError = undefined;\n\n            try {\n                for (var _iterator = this._blocks[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                    var block = _step.value;\n\n                    if (!block.processing) {\n                        continue;\n                    }\n                    return block;\n                }\n            } catch (err) {\n                _didIteratorError = true;\n                _iteratorError = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion && _iterator.return) {\n                        _iterator.return();\n                    }\n                } finally {\n                    if (_didIteratorError) {\n                        throw _iteratorError;\n                    }\n                }\n            }\n\n            throw Error(\"找不到正在处理的Block\");\n        }\n    }, {\n        key: \"finishedBlocksSize\",\n        get: function get() {\n            var size = 0;\n            var _iteratorNormalCompletion2 = true;\n            var _didIteratorError2 = false;\n            var _iteratorError2 = undefined;\n\n            try {\n                for (var _iterator2 = this._blocks[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                    var block = _step2.value;\n\n                    size += block.isFinish ? block.data.size : 0;\n                }\n            } catch (err) {\n                _didIteratorError2 = true;\n                _iteratorError2 = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion2 && _iterator2.return) {\n                        _iterator2.return();\n                    }\n                } finally {\n                    if (_didIteratorError2) {\n                        throw _iteratorError2;\n                    }\n                }\n            }\n\n            return size;\n        }\n    }, {\n        key: \"chunks\",\n        get: function get() {\n            var array = [];\n            var _iteratorNormalCompletion3 = true;\n            var _didIteratorError3 = false;\n            var _iteratorError3 = undefined;\n\n            try {\n                for (var _iterator3 = this._blocks[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n                    var block = _step3.value;\n                    var _iteratorNormalCompletion4 = true;\n                    var _didIteratorError4 = false;\n                    var _iteratorError4 = undefined;\n\n                    try {\n                        for (var _iterator4 = block.chunks[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n                            var chunk = _step4.value;\n\n                            array.push(chunk);\n                        }\n                    } catch (err) {\n                        _didIteratorError4 = true;\n                        _iteratorError4 = err;\n                    } finally {\n                        try {\n                            if (!_iteratorNormalCompletion4 && _iterator4.return) {\n                                _iterator4.return();\n                            }\n                        } finally {\n                            if (_didIteratorError4) {\n                                throw _iteratorError4;\n                            }\n                        }\n                    }\n                }\n            } catch (err) {\n                _didIteratorError3 = true;\n                _iteratorError3 = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion3 && _iterator3.return) {\n                        _iterator3.return();\n                    }\n                } finally {\n                    if (_didIteratorError3) {\n                        throw _iteratorError3;\n                    }\n                }\n            }\n\n            return array;\n        }\n        /**\n         * 获取正在处理的chunk\n         * @returns {Block}\n         */\n\n    }, {\n        key: \"processingChunk\",\n        get: function get() {\n            var _iteratorNormalCompletion5 = true;\n            var _didIteratorError5 = false;\n            var _iteratorError5 = undefined;\n\n            try {\n                for (var _iterator5 = this._blocks[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n                    var block = _step5.value;\n\n                    if (!block.processing) {\n                        continue;\n                    }\n                    var _iteratorNormalCompletion6 = true;\n                    var _didIteratorError6 = false;\n                    var _iteratorError6 = undefined;\n\n                    try {\n                        for (var _iterator6 = block.chunks[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n                            var chunk = _step6.value;\n\n                            if (!chunk.processing) {\n                                continue;\n                            }\n                            return chunk;\n                        }\n                    } catch (err) {\n                        _didIteratorError6 = true;\n                        _iteratorError6 = err;\n                    } finally {\n                        try {\n                            if (!_iteratorNormalCompletion6 && _iterator6.return) {\n                                _iterator6.return();\n                            }\n                        } finally {\n                            if (_didIteratorError6) {\n                                throw _iteratorError6;\n                            }\n                        }\n                    }\n                }\n            } catch (err) {\n                _didIteratorError5 = true;\n                _iteratorError5 = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion5 && _iterator5.return) {\n                        _iterator5.return();\n                    }\n                } finally {\n                    if (_didIteratorError5) {\n                        throw _iteratorError5;\n                    }\n                }\n            }\n\n            throw Error(\"找不到正在处理的Chunk\");\n        }\n        /**\n         * 总共分片数量(所有分块的分片数量总和)\n         * @returns {number}\n         */\n\n    }, {\n        key: \"totalChunkCount\",\n        get: function get() {\n            var count = 0;\n            var _iteratorNormalCompletion7 = true;\n            var _didIteratorError7 = false;\n            var _iteratorError7 = undefined;\n\n            try {\n                for (var _iterator7 = this._blocks[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {\n                    var block = _step7.value;\n\n                    count += block.chunks.length;\n                }\n            } catch (err) {\n                _didIteratorError7 = true;\n                _iteratorError7 = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion7 && _iterator7.return) {\n                        _iterator7.return();\n                    }\n                } finally {\n                    if (_didIteratorError7) {\n                        throw _iteratorError7;\n                    }\n                }\n            }\n\n            return count;\n        }\n    }]);\n\n    return ChunkTask;\n}(_BaseTask3.default);\n/**\n * 分块，分块大小七牛固定是4M\n */\n\n\nvar Block = function () {\n    /**\n     *\n     * @param start 起始位置\n     * @param end 结束位置\n     * @param data 块数据\n     * @param chunkSize 分片数据的最大大小\n     * @param file 分块所属文件\n     */\n    function Block(start, end, data, chunkSize, file) {\n        _classCallCheck(this, Block);\n\n        this._chunks = [];\n        this._isFinish = false; //是否上传完成\n        this._processing = false; //是否正在上传\n        this._data = data;\n        this._start = start;\n        this._end = end;\n        this._file = file;\n        this.spliceBlock2Chunk(chunkSize);\n    }\n    /**\n     * 将块分片\n     */\n\n\n    _createClass(Block, [{\n        key: \"spliceBlock2Chunk\",\n        value: function spliceBlock2Chunk(chunkSize) {\n            var blockSize = this._data.size;\n            var data = this._data;\n            //总片数\n            var chunkCount = Math.ceil(blockSize / chunkSize);\n            for (var i = 0; i < chunkCount; i++) {\n                var start = i * chunkSize; //起始位置\n                var end = start + chunkSize; //结束位置\n                //构造一个片实例\n                var chunk = new Chunk(start, end, data.slice(start, end), this);\n                //添加到数组中\n                this._chunks.push(chunk);\n            }\n        }\n        /**\n         * 是否上传中\n         * @returns {boolean}\n         */\n\n    }, {\n        key: \"processing\",\n        get: function get() {\n            return this._processing;\n        },\n        set: function set(value) {\n            this._processing = value;\n        }\n        /**\n         * 分块所属的文件\n         * @returns {File}\n         */\n\n    }, {\n        key: \"file\",\n        get: function get() {\n            return this._file;\n        }\n        /**\n         * 是否已经结束\n         * @returns {boolean}\n         */\n\n    }, {\n        key: \"isFinish\",\n        get: function get() {\n            return this._isFinish;\n        },\n        set: function set(value) {\n            this._isFinish = value;\n        }\n        /**\n         * 返回分块数据\n         * @returns {Blob}\n         */\n\n    }, {\n        key: \"data\",\n        get: function get() {\n            return this._data;\n        }\n        /**\n         * 返回字节起始位置\n         * @returns {number}\n         */\n\n    }, {\n        key: \"start\",\n        get: function get() {\n            return this._start;\n        }\n        /**\n         * 返回字节结束位置\n         * @returns {number}\n         */\n\n    }, {\n        key: \"end\",\n        get: function get() {\n            return this._end;\n        }\n    }, {\n        key: \"chunks\",\n        get: function get() {\n            return this._chunks;\n        }\n    }]);\n\n    return Block;\n}();\n/**\n * 分片，分片大小可以自定义，至少1字节\n */\n\n\nvar Chunk = function () {\n    /**\n     *\n     * @param start 字节起始位置\n     * @param end 字节结束位置\n     * @param data 分片数据\n     * @param block 分块对象\n     */\n    function Chunk(start, end, data, block) {\n        _classCallCheck(this, Chunk);\n\n        this._processing = false; //是否正在上传\n        this._isFinish = false; //是否上传完成\n        this._start = start;\n        this._end = end;\n        this._data = data;\n        this._block = block;\n    }\n    /**\n     * 返回chunk所属的Block对象\n     * @returns {Block}\n     */\n\n\n    _createClass(Chunk, [{\n        key: \"block\",\n        get: function get() {\n            return this._block;\n        }\n        /**\n         * 返回字节起始位置\n         * @returns {number}\n         */\n\n    }, {\n        key: \"start\",\n        get: function get() {\n            return this._start;\n        }\n        /**\n         * 返回字节结束位置\n         * @returns {number}\n         */\n\n    }, {\n        key: \"end\",\n        get: function get() {\n            return this._end;\n        }\n        /**\n         * 返回分片数据\n         * @returns {Blob}\n         */\n\n    }, {\n        key: \"data\",\n        get: function get() {\n            return this._data;\n        }\n        /**\n         * 是否已经结束\n         * @returns {boolean}\n         */\n\n    }, {\n        key: \"isFinish\",\n        get: function get() {\n            return this._isFinish;\n        },\n        set: function set(value) {\n            this._isFinish = value;\n        }\n    }, {\n        key: \"host\",\n        get: function get() {\n            return this._host;\n        },\n        set: function set(value) {\n            this._host = value;\n        }\n        /**\n         * 是否上传中\n         * @returns {boolean}\n         */\n\n    }, {\n        key: \"processing\",\n        get: function get() {\n            return this._processing;\n        },\n        set: function set(value) {\n            this._processing = value;\n        }\n        /**\n         * 返回上传控制信息(七牛服务器返回前一次上传返回的分片上传控制信息,用于下一次上传,第一个chunk此值为空)\n         * @returns {string}\n         */\n\n    }, {\n        key: \"ctx\",\n        get: function get() {\n            return this._ctx;\n        },\n        set: function set(value) {\n            this._ctx = value;\n        }\n    }]);\n\n    return Chunk;\n}();\n\nexports.ChunkTask = ChunkTask;\nexports.Block = Block;\nexports.Chunk = Chunk;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/upload/task/ChunkTask.ts\n// module id = 9\n// module chunks = 0","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _BaseTask2 = require(\"./BaseTask\");\n\nvar _BaseTask3 = _interopRequireDefault(_BaseTask2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\n * 直传任务\n */\nvar DirectTask = function (_BaseTask) {\n  _inherits(DirectTask, _BaseTask);\n\n  function DirectTask() {\n    _classCallCheck(this, DirectTask);\n\n    return _possibleConstructorReturn(this, (DirectTask.__proto__ || Object.getPrototypeOf(DirectTask)).apply(this, arguments));\n  }\n\n  return DirectTask;\n}(_BaseTask3.default);\n\nexports.default = DirectTask;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/upload/task/DirectTask.ts\n// module id = 10\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar UUID = function () {\n    function UUID() {\n        _classCallCheck(this, UUID);\n    }\n\n    _createClass(UUID, null, [{\n        key: 'uuid',\n        value: function uuid() {\n            var d = new Date().getTime();\n            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n                var r = (d + Math.random() * 16) % 16 | 0;\n                d = Math.floor(d / 16);\n                return (c == 'x' ? r : r & 0x3 | 0x8).toString(16);\n            });\n        }\n    }]);\n\n    return UUID;\n}();\n\nexports.default = UUID;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/upload/uuid/UUID.ts\n// module id = 11\n// module chunks = 0","'use strict';\n\n/**\n * Object.assign polyfill\n */\nif (typeof Object.assign != 'function') {\n    Object.assign = function (target) {\n        if (target == null) {\n            throw new TypeError('Cannot convert undefined or null to object');\n        }\n        target = Object(target);\n        for (var index = 1; index < arguments.length; index++) {\n            var source = arguments[index];\n            if (source != null) {\n                for (var key in source) {\n                    if (Object.prototype.hasOwnProperty.call(source, key)) {\n                        target[key] = source[key];\n                    }\n                }\n            }\n        }\n        return target;\n    };\n}\n/**\n * canvas.toBlob polyfill\n */\nif (!HTMLCanvasElement.prototype.toBlob) {\n    Object.defineProperty(HTMLCanvasElement.prototype, 'toBlob', {\n        value: function value(callback, type, quality) {\n            var binStr = atob(this.toDataURL(type, quality).split(',')[1]),\n                len = binStr.length,\n                arr = new Uint8Array(len);\n            for (var i = 0; i < len; i++) {\n                arr[i] = binStr.charCodeAt(i);\n            }\n            callback(new Blob([arr], { type: type || 'image/png' }));\n        }\n    });\n}\n/**\n * endsWith polyfill\n */\nif (!String.prototype.endsWith) {\n    var _toString = {}.toString;\n    var endsWith = function endsWith(search) {\n        if (this == null) {\n            throw TypeError();\n        }\n        var string = String(this);\n        if (search && _toString.call(search) == '[object RegExp]') {\n            throw TypeError();\n        }\n        var stringLength = string.length;\n        var searchString = String(search);\n        var searchLength = searchString.length;\n        var pos = stringLength;\n        if (arguments.length > 1) {\n            var position = arguments[1];\n            if (position !== undefined) {\n                // `ToInteger`\n                pos = position ? Number(position) : 0;\n                if (pos != pos) {\n                    pos = 0;\n                }\n            }\n        }\n        var end = Math.min(Math.max(pos, 0), stringLength);\n        var start = end - searchLength;\n        if (start < 0) {\n            return false;\n        }\n        var index = -1;\n        while (++index < searchLength) {\n            if (string.charCodeAt(start + index) != searchString.charCodeAt(index)) {\n                return false;\n            }\n        }\n        return true;\n    };\n    if (Object.defineProperty) {\n        Object.defineProperty(String.prototype, 'endsWith', {\n            'value': endsWith,\n            'configurable': true,\n            'writable': true\n        });\n    } else {\n        String.prototype.endsWith = endsWith;\n    }\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/util/Polyfill.ts\n// module id = 12\n// module chunks = 0"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;A;;;;;AChEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACrrtHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AC9CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACvzjiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACjsourceRoot":""}